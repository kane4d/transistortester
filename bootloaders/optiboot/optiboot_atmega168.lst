
optiboot.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .data         00000000  00800100  00003fda  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00003e00  00003e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  0000024e  2**0
                  CONTENTS, READONLY
  3 .stab         00000ac8  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000032  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <__ctors_end>:
	.section .text
	.func optiboot
	.global optiboot

optiboot:
	cli
    3e00:	f8 94       	cli
	eor	r1, r1
    3e02:	11 24       	eor	r1, r1
#ifndef MCUSR
 #define MCUSR MCUCSR		/* ATmega16 */
#endif

//#define RESET_CAUSE GPIOR1
	AIN	r24, MCUSR
    3e04:	84 b7       	in	r24, 0x34	; 52
	AOUT	MCUSR, r1	; MCUSR = 0
    3e06:	14 be       	out	0x34, r1	; 52
	AOUT	RESET_CAUSE, r24	; save reason of restart (MCUSR) in IO register
    3e08:	8e bb       	out	0x1e, r24	; 30
 #define WATCHDOG_TIME WATCHDOG_4S
#else		/* no FORCE_WATCHDOG */
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
	andi	r24, (1<<WDRF)|(1<<PORF)|(1<<BORF)  ;0x0D	
    3e0a:	8d 70       	andi	r24, 0x0D	; 13
		; none of the WatchDog, PowerOn or BrownOut reason ?
	breq	try_loader	; interrupt must be caused by a external reset
    3e0c:	31 f0       	breq	.+12     	; 0x3e1a <try_loader>

00003e0e <appStart>:
 #define WATCHDOG_TIME WATCHDOG_OFF
#endif		/* FORCE_WATCHDOG */
;***************************************************************
appStart:

	ldi	r20, WATCHDOG_TIME	; _OFF or _4S depending on FORCE_WATCHDOG
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
	rcall	watchdogConfig		; WATCHDOG_OFF (or _4S if FORCE_WATCHDOG)
    3e10:	cf d0       	rcall	.+414    	; 0x3fb0 <watchdogConfig>
	ldi	ZL,lo8(1000)
	AOUT	GPIOR1, ZH
	AOUT	ICR1L, ZH
;##############################################################
#endif
	AIN	r2, RESET_CAUSE			; R2  is compatible  to older optiboot version
    3e12:	2e b2       	in	r2, 0x1e	; 30

#ifdef	VIRTUAL_BOOT_PARTITION
	ldi	ZL, save_vect_addr/2		; // Jump to WDT vector (jmp or rjmp table)
	eor	ZH, ZH
#else
       	eor	ZL, ZL	; // Jump to RST vector	 0x0000
    3e14:	ee 27       	eor	r30, r30
      	eor	ZH, ZH
    3e16:	ff 27       	eor	r31, r31
#endif
       	ijmp
    3e18:	09 94       	ijmp

00003e1a <try_loader>:
  #undef UART_MODE_2x
 	ldi	r24, (0<<U2X0)		; single speed mode
 #else
  #define BAUD_ACTUAL (F_CPU/(8 * ((BAUD_DIV)+1)))
  #define UART_MODE_2x
	ldi	r24, (1<<U2X0)		; double speed mode
    3e1a:	82 e0       	ldi	r24, 0x02	; 2
 #endif
	AOUT	UART_SRA, r24
    3e1c:	80 93 c0 00 	sts	0x00C0, r24
  // permit high bitrates (ie 1Mbps@16MHz) if error is zero
  #error "Unachievable baud rate (too fast) BAUD_RATE"
#endif // baud rate fastn check
#include "report_baud_div.h"

	ldi	r24, (1<<RXEN0)|(1<<TXEN0)	;0x18	
    3e20:	88 e1       	ldi	r24, 0x18	; 24
	AOUT	UART_SRB, r24
    3e22:	80 93 c1 00 	sts	0x00C1, r24
	AOUT	UCSRC, r25		; without (1<<URSEL) we write the upper BAUD_DIV
  #endif
 #else
    /* no ATmega8_16_32 */
  #ifndef __AVR_ATmega163__
	ldi	r25, (1<<UCSZ00)|(1<<UCSZ01)	;0x06
    3e26:	96 e0       	ldi	r25, 0x06	; 6
	AOUT	UART_SRC, r25
    3e28:	90 93 c2 00 	sts	0x00C2, r25
  #endif
	ldi	r25, lo8(BAUD_DIV)	; 0x10
    3e2c:	90 e1       	ldi	r25, 0x10	; 16
	AOUT	UART_SRRL, r25
    3e2e:	90 93 c4 00 	sts	0x00C4, r25
	ldi	r20, WATCHDOG_1S	;0x0E
 #else
	ldi	r20, WATCHDOG_500MS	;
 #endif
#else
	ldi	r20, WATCHDOG_1S	;0x0E	(default value)
    3e32:	4e e0       	ldi	r20, 0x0E	; 14
#endif
	rcall	watchdogConfig
    3e34:	bd d0       	rcall	.+378    	; 0x3fb0 <watchdogConfig>

/* If the LED_DDR bit would be switched, no prepare is needed */
/* because the LED_PORT bit is set to 0 by reset */
/* But the LED Anode must be connected to the VCC side */
#if (LED_START_FLASHES > 0) || (LED_DATA_FLASH > 0)
	ASBI	LED_DDR, LEDbit			; set LED Port bit to output mode
    3e36:	25 9a       	sbi	0x04, 5	; 4
	ASBI	UART_TX_PORT, UART_TX_BIT	; set TX bit to high
  #endif
	ASBI	UART_TX_DDR, UART_TX_BIT	; set TX DDR bit as output
 #endif
#endif
	ldi	r18, lo8(RAMSTART)	; r18:r19 = RAMSTART
    3e38:	20 e0       	ldi	r18, 0x00	; 0
	ldi	r19, hi8(RAMSTART)	; 
    3e3a:	31 e0       	ldi	r19, 0x01	; 1

#if LED_START_FLASHES > 0
 ; Flash the LED is requested
 #if LED_START_FLASHES > 1
  ; Flash the LED is requested more than once, loop is required
	ldi	r21, LED_START_FLASHES
    3e3c:	53 e0       	ldi	r21, 0x03	; 3

00003e3e <fl_lop>:
fl_lop:
 #endif
	ASBI	LED_PORT, LEDbit	; set LED-Pin high, LED on
    3e3e:	2d 9a       	sbi	0x05, 5	; 5
	rcall	wait_T1ov
    3e40:	bd d0       	rcall	.+378    	; 0x3fbc <wait_T1ov>
	ACBI	LED_PORT, LEDbit	; set LED-Pin low, LED off
    3e42:	2d 98       	cbi	0x05, 5	; 5
 #warning "debug out 'U' at TX, don't use a bootloader"
	ldi	r24, 'U'		; binary 01010101
	rcall	putch			; putch can use r22, r23, r25
 #endif
 #if LED_START_FLASHES > 1
	rcall	wait_T1ov
    3e44:	bb d0       	rcall	.+374    	; 0x3fbc <wait_T1ov>
	subi	r21, 1
    3e46:	51 50       	subi	r21, 0x01	; 1
	brne	fl_lop		; while (--count)
    3e48:	d1 f7       	brne	.-12     	; 0x3e3e <fl_lop>

00003e4a <get_nextp>:

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  /* Forever loop */
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
get_nextp:
	rcall	getch
    3e4a:	91 d0       	rcall	.+290    	; 0x3f6e <getch>
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	cpi	r24, STK_GET_PARAMETER		; 'A'
    3e4c:	81 34       	cpi	r24, 0x41	; 65
	brne	fin_get_par
    3e4e:	61 f4       	brne	.+24     	; 0x3e68 <ck_SET_DEV>
// handle get parameter instruction
	rcall	getch		; get parameter byte
    3e50:	8e d0       	rcall	.+284    	; 0x3f6e <getch>
	mov	r21, r24	; move parameter to r21
    3e52:	58 2f       	mov	r21, r24
	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    3e54:	7f d0       	rcall	.+254    	; 0x3f54 <verifySpace>

 	ldi	r24, OPTIBOOT_MINVER	; 	
    3e56:	83 e0       	ldi	r24, 0x03	; 3
	cpi	r21, STK_SW_MINOR	; Parm_STK_SW_MINOR (0x82)
    3e58:	52 38       	cpi	r21, 0x82	; 130
	breq	to_putch	; rcall putch, rjmp put_ok
    3e5a:	21 f0       	breq	.+8      	; 0x3e64 <to_putch>
	ldi	r24, 0x03	; answer generic 0x03
    3e5c:	83 e0       	ldi	r24, 0x03	; 3
	cpi	r21, STK_SW_MAJOR	; Parm_STK_SW_MAJOR (0x81)
    3e5e:	51 38       	cpi	r21, 0x81	; 129
	brne	to_putch	; rcall putch, rjmp put_ok
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <to_putch>
	ldi	r24, OPTIBOOT_MAJVER+OPTIBOOT_CUSTOMVER
    3e62:	84 e7       	ldi	r24, 0x74	; 116

00003e64 <to_putch>:
to_putch:
       	rcall	putch		; answer MINVER or MAJVER+CUSTOMVER or 0x03
    3e64:	7c d0       	rcall	.+248    	; 0x3f5e <putch>
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    3e66:	61 c0       	rjmp	.+194    	; 0x3f2a <put_ok>

00003e68 <ck_SET_DEV>:
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
no_read_lock:
 #endif
#endif	/* SUPPORT_READ_FUSES */
ck_SET_DEV:
	ldi	r20, 20
    3e68:	44 e1       	ldi	r20, 0x14	; 20
	cpi	r24, STK_SET_DEVICE		; 'B'
    3e6a:	82 34       	cpi	r24, 0x42	; 66
       	breq	to_getNch	; STK set device is ignored
    3e6c:	19 f0       	breq	.+6      	; 0x3e74 <to_getNch>
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	ldi	r20, 5
    3e6e:	45 e0       	ldi	r20, 0x05	; 5
   	cpi	r24, STK_SET_DEVICE_EXT		; 'E'
    3e70:	85 34       	cpi	r24, 0x45	; 69
	brne	ck_LA
    3e72:	11 f4       	brne	.+4      	; 0x3e78 <ck_LA>

00003e74 <to_getNch>:
; STK set device or STK set device ext is ignored
to_getNch:
	rcall	getNch		; ignore r20 count (20 or 5) parameters
    3e74:	6c d0       	rcall	.+216    	; 0x3f4e <getNch>

00003e76 <to_put_ok>:
to_put_ok:
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    3e76:	59 c0       	rjmp	.+178    	; 0x3f2a <put_ok>

00003e78 <ck_LA>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_LA:
	cpi	r24, STK_LOAD_ADDRESS		; 'U'
    3e78:	85 35       	cpi	r24, 0x55	; 85
   	brne	ck_UNI
    3e7a:	41 f4       	brne	.+16     	; 0x3e8c <ck_UNI>
; **** STK load address
	rcall	getch		; lower address bits
    3e7c:	78 d0       	rcall	.+240    	; 0x3f6e <getch>
	mov	r4, r24
    3e7e:	48 2e       	mov	r4, r24
	rcall	getch		; upper address bits
    3e80:	76 d0       	rcall	.+236    	; 0x3f6e <getch>
	mov	r5, r24		; r4:5 is load address
    3e82:	58 2e       	mov	r5, r24
#if defined(EEprom_ByteAddress)
	movw	ZL, r4		; save original address in r30:r31
#endif
	add	r4, r4		; newAddress << 1
    3e84:	44 0c       	add	r4, r4
	adc	r5, r5		; make word address to byte address
    3e86:	55 1c       	adc	r5, r5
#if !defined(EEprom_ByteAddress)
	movw	ZL, r4		; save original address in r30:r31
    3e88:	f2 01       	movw	r30, r4
#ifdef RAMPZ
	adc	r1, r1
	AOUT	RAMPZ, r1
	eor	r1, r1		; restore default zero value for r1
#endif
	rjmp	ver_put 	; rcall verifySpace; rjmp put_ok
    3e8a:	5f c0       	rjmp	.+190    	; 0x3f4a <ver_put>

00003e8c <ck_UNI>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_UNI:
       	cpi	r24, STK_UNIVERSAL 	; 'V'
    3e8c:	86 35       	cpi	r24, 0x56	; 86
       	brne	ck_PP
    3e8e:	21 f4       	brne	.+8      	; 0x3e98 <ck_PP>
	ldi	r20, 4		; getNch(4)
    3e90:	44 e0       	ldi	r20, 0x04	; 4
	rcall	getNch
    3e92:	5d d0       	rcall	.+186    	; 0x3f4e <getNch>
 	ldi	r24, 0
    3e94:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	to_putch	; rcall putch, rjmp put_ok
    3e96:	e6 cf       	rjmp	.-52     	; 0x3e64 <to_putch>

00003e98 <ck_PP>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_PP:
  	cpi	r24, STK_PROG_PAGE 	; 'd'
    3e98:	84 36       	cpi	r24, 0x64	; 100
	breq	is_PROG
    3e9a:	09 f0       	breq	.+2      	; 0x3e9e <is_PROG>
	rjmp	ck_READP
    3e9c:	31 c0       	rjmp	.+98     	; 0x3f00 <ck_READP>

00003e9e <is_PROG>:
is_PROG:
    /* Write memory, length is big endian and is in bytes */
	rcall	get_length	; r16:r17  and r26:r27 is length
    3e9e:	76 d0       	rcall	.+236    	; 0x3f8c <get_length>

	rcall	getch	
    3ea0:	66 d0       	rcall	.+204    	; 0x3f6e <getch>

00003ea2 <ee_check>:
    // PROGRAM PAGE - we support flash and optional EEPROM programming
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ee_check:
#if SUPPORT_EEPROM > 0
	subi	r24, 'E'	; type = getch() - 'E'
    3ea2:	85 54       	subi	r24, 0x45	; 69
	mov	r6, r24
    3ea4:	68 2e       	mov	r6, r24

    	breq	no_pg_erase	; if (type)
    3ea6:	21 f0       	breq	.+8      	; 0x3eb0 <no_pg_erase>
#endif
#if NRWWSTART != 0
  ; if NRWWSTART is zero, no RWW section is present. Never erase the page
  ; at this early state.
;**	cp	r4, r1		; lo8(NRWWSTART) allways 0
	ldi	r24, hi8(NRWWSTART) ; 0x70
    3ea8:	88 e3       	ldi	r24, 0x38	; 56
;**	cpc	r5, r24
;**	brcc	no_pg_erase	; if (address < NRWWSTART)
	cp	r5, r24		; lo8() is allways zero
    3eaa:	58 16       	cp	r5, r24
	brsh	no_pg_erase	; if (address < NRWWSTART)
    3eac:	08 f4       	brcc	.+2      	; 0x3eb0 <no_pg_erase>
 // If we are in RWW section, immediately start page erase
	rcall	boot_page_erase
    3eae:	78 d0       	rcall	.+240    	; 0x3fa0 <boot_page_erase>

00003eb0 <no_pg_erase>:
 // While that is going on, read in page contents
#endif
no_pg_erase:
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	movw	YL, r18		; buf16Ptr (r28:r29) = RAMSTART
    3eb0:	e9 01       	movw	r28, r18

00003eb2 <fill_buf>:
fill_buf:
	rcall	getch		; call next data from serial
    3eb2:	5d d0       	rcall	.+186    	; 0x3f6e <getch>
	st	Y+, r24		; *bufPtr++ = getch()
    3eb4:	89 93       	st	Y+, r24
	sbiw	r26, 1		; length = length - 1
    3eb6:	11 97       	sbiw	r26, 0x01	; 1
	brne	fill_buf
    3eb8:	e1 f7       	brne	.-8      	; 0x3eb2 <fill_buf>
	movw	r26, r16	; set length back to start value
    3eba:	d8 01       	movw	r26, r16
	movw	YL, r18		; buf16Ptr (r28:r29) = RAMSTART
    3ebc:	e9 01       	movw	r28, r18

	; SRAM of ATmega is filled with data
	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    3ebe:	4a d0       	rcall	.+148    	; 0x3f54 <verifySpace>
#if SUPPORT_EEPROM > 0
	cpse	r6, r1		; r6 == 0, is EEprom write
    3ec0:	61 10       	cpse	r6, r1
	rjmp	write_flash	; if (!type)
    3ec2:	09 c0       	rjmp	.+18     	; 0x3ed6 <write_flash>

00003ec4 <ee_wrlop>:
; is EEprom write
; the address is allŕeady set in Z
ee_wrlop:
     	wdr		; watchdogReset();
    3ec4:	a8 95       	wdr
	ld	r24, Y+			; *bufPtr++
    3ec6:	89 91       	ld	r24, Y+
 #if defined(VIRTUAL_BOOT_PARTITION)
	rcall	wr_eeprom
 #else
 /* eeprom write is done only here, therefore without a rcall to save flash */
	rcall	set_eeprom_adr	; Z+
    3ec8:	5b d0       	rcall	.+182    	; 0x3f80 <set_eeprom_adr>
	AOUT	EEDR, r24	; data to EEprom controller
    3eca:	80 bd       	out	0x20, r24	; 32
	ASBI	EECR, EEMPE
    3ecc:	fa 9a       	sbi	0x1f, 2	; 31
	ASBI	EECR, EEPE	; /* Start eeprom write by setting EEPE */
    3ece:	f9 9a       	sbi	0x1f, 1	; 31
 #endif 	/* VIRTUAL_BOOT_PARTITION */

	sbiw	r26, 1		; length = length - 1
    3ed0:	11 97       	sbiw	r26, 0x01	; 1
	brne	ee_wrlop
    3ed2:	c1 f7       	brne	.-16     	; 0x3ec4 <ee_wrlop>
	; eeprom write is finished
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    3ed4:	2a c0       	rjmp	.+84     	; 0x3f2a <put_ok>

00003ed6 <write_flash>:
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
write_flash:
#if NRWWSTART != 0
  ; If NRWWSTART is zero, boot_page_erase must be called every time here!
;**	cp	r4, r1			; lo8(NRWWSTART) is 0 
	ldi	ZH, hi8(NRWWSTART) ; 0x70
    3ed6:	f8 e3       	ldi	r31, 0x38	; 56
;**	cpc	r5, ZH
;**	brcs	no_erase1		;if (address >= NRWWSTART)
	cp	r5, ZH			; hi8(NRWWSTART) lo8() is allways zero
    3ed8:	5f 16       	cp	r5, r31
	brlo	no_erase1
    3eda:	08 f0       	brcs	.+2      	; 0x3ede <no_erase1>
        // Todo: Take RAMPZ into account (not doing so just means that we will
        //  treat the top of both "pages" of flash as NRWW, for a slight speed
        //  decrease, so fixing this is not urgent.)
#endif

	rcall	boot_page_erase
    3edc:	61 d0       	rcall	.+194    	; 0x3fa0 <boot_page_erase>

00003ede <no_erase1>:
no_erase1:
        // If only a partial page is to be programmed, the erase might not be complete.
        // So check that here
	rcall	wait_flash_ready
    3ede:	5c d0       	rcall	.+184    	; 0x3f98 <wait_flash_ready>
 #endif		/* FLASHEND > 8192 */ 

no_patch1:
#endif		/* VIRTUAL_BOOT_PARTITION */

	movw	ZL, r4		; addrPtr = address
    3ee0:	f2 01       	movw	r30, r4

00003ee2 <wr_lop1>:
;	movw	YL, r18		; buf16Ptr (r28:r29) = RAMSTART
wr_lop1:
    	ld	r0, Y+		; *buf16Ptr++
    3ee2:	09 90       	ld	r0, Y+
	ld	r1, Y+
    3ee4:	19 90       	ld	r1, Y+
	ldi	r20, (1<<SELFPRGEN)
    3ee6:	41 e0       	ldi	r20, 0x01	; 1
	; r0:r1 is data, Z r30:r31 is address, probably RAMPZ is also set
	rcall	do_spm		; AOUT SPMCSR, r20 ; spm
    3ee8:	5d d0       	rcall	.+186    	; 0x3fa4 <do_spm>
	eor	r1, r1
    3eea:	11 24       	eor	r1, r1
	adiw	ZL, 2		; increment address
    3eec:	32 96       	adiw	r30, 0x02	; 2
	sbiw	r26, 2		; length = length - 2
    3eee:	12 97       	sbiw	r26, 0x02	; 2
	brne	wr_lop1
    3ef0:	c1 f7       	brne	.-16     	; 0x3ee2 <wr_lop1>

	movw	ZL, r4		; addrPtr = address
    3ef2:	f2 01       	movw	r30, r4
#ifdef __AVR_ATmega163__
	andi	ZL, 0x80	; make shure a zero Z6:1 for ATmega163
#endif
        // Write from programming buffer
	ldi	r20, (1<<PGWRT)|(1<<SELFPRGEN)	; 0x05	
    3ef4:	45 e0       	ldi	r20, 0x05	; 5
	rcall	do_spm		; AOUT SPMCSR, r20 ; spm
    3ef6:	56 d0       	rcall	.+172    	; 0x3fa4 <do_spm>
	rcall	wait_flash_ready
    3ef8:	4f d0       	rcall	.+158    	; 0x3f98 <wait_flash_ready>
#if defined(RWWSRE)
       // Reenable read access to flash
	ldi	r20, (1<<RWWSRE)|(1<<SELFPRGEN)	; 0x11	
    3efa:	41 e1       	ldi	r20, 0x11	; 17
	rcall	do_spm		; AOUT SPMCSR, r20 ; spm
    3efc:	53 d0       	rcall	.+166    	; 0x3fa4 <do_spm>
	rcall	wr_eeprom
        ; Now we have saved the original save_vector address to the last two EEproms.
	; The save_vector has now the original address from the reset vector and
	; the reset vector now jmp to the bootloader.
#endif
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    3efe:	15 c0       	rjmp	.+42     	; 0x3f2a <put_ok>

00003f00 <ck_READP>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_READP:
      	cpi	r24, STK_READ_PAGE	; 't'
    3f00:	84 37       	cpi	r24, 0x74	; 116
	brne   	ck_READS
    3f02:	b1 f4       	brne	.+44     	; 0x3f30 <ck_READS>
    /* Read memory block mode, length is big endian.  */
	rcall	get_length	; r16:r17  and r26:r27 is length
    3f04:	43 d0       	rcall	.+134    	; 0x3f8c <get_length>
     // READ PAGE - we only read flash and optional EEPROM
	rcall	getch
    3f06:	33 d0       	rcall	.+102    	; 0x3f6e <getch>
	mov	r21, r24	; type = getch()
    3f08:	58 2f       	mov	r21, r24
	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    3f0a:	24 d0       	rcall	.+72     	; 0x3f54 <verifySpace>
;	TODO: putNch()

#if SUPPORT_EEPROM > 0
	cpi	r21, 'E'	; 0x45
    3f0c:	55 34       	cpi	r21, 0x45	; 69
	brne	flash_read
    3f0e:	39 f4       	brne	.+14     	; 0x3f1e <flash_read>

00003f10 <ee_rd_lop2>:
;     must be EEprom read
; read EEprom, the Address is allready set in Z
ee_rd_lop2:
	sbiw	r26, 1		; length-1
    3f10:	11 97       	sbiw	r26, 0x01	; 1
	brcs	next_adr_put_ok	;
    3f12:	50 f0       	brcs	.+20     	; 0x3f28 <next_adr_put_ok>
 #ifdef VIRTUAL_BOOT_PARTITION
	rcall	rd_eeprom	; Z+
 #else
  /* EEprom read is only required here without the VIRTUAL_BOOT_PARTITION */
  /* Therefore is is used without a rcall directly                        */
	rcall 	set_eeprom_adr	; Z+
    3f14:	35 d0       	rcall	.+106    	; 0x3f80 <set_eeprom_adr>
	ASBI	EECR, EERE
    3f16:	f8 9a       	sbi	0x1f, 0	; 31
	AIN	r24, EEDR		; read data from EEprom
    3f18:	80 b5       	in	r24, 0x20	; 32
 #endif
	rcall	putch
    3f1a:	21 d0       	rcall	.+66     	; 0x3f5e <putch>
	rjmp	ee_rd_lop2
    3f1c:	f9 cf       	rjmp	.-14     	; 0x3f10 <ee_rd_lop2>

00003f1e <flash_read>:
#endif

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;	read flash
flash_read:
	movw	ZL, r4		; Z = addrPtr = address
    3f1e:	f2 01       	movw	r30, r4

00003f20 <flash_rd_lop>:
          //      do putch(pgm_read_byte_near(address++));
          //      while (--length);
          // read a Flash and increment the address (may increment RAMPZ)
	elpm	r24, Z+
#else
	lpm	r24, Z+
    3f20:	85 91       	lpm	r24, Z+
	mov	r21, r25	; save second byte
	rcall	putch
	mov	r24, r21
#endif		/* VIRTUAL_BOOT_PARTITION */

	rcall	putch
    3f22:	1d d0       	rcall	.+58     	; 0x3f5e <putch>
	sbiw	r26, LenDecrement	; length - 1 or 2 bytes for VIRTUAL_BOOT_PARTITION
    3f24:	11 97       	sbiw	r26, 0x01	; 1
	brne	flash_rd_lop
    3f26:	e1 f7       	brne	.-8      	; 0x3f20 <flash_rd_lop>

00003f28 <next_adr_put_ok>:
next_adr_put_ok:
	movw	r4, ZL		; new address  ???
    3f28:	2f 01       	movw	r4, r30

00003f2a <put_ok>:
put_ok:
     	ldi	r24, STK_OK	; 0x10
    3f2a:	80 e1       	ldi	r24, 0x10	; 16
       	rcall	putch
    3f2c:	18 d0       	rcall	.+48     	; 0x3f5e <putch>
       	rjmp	get_nextp
    3f2e:	8d cf       	rjmp	.-230    	; 0x3e4a <get_nextp>

00003f30 <ck_READS>:

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_READS:
     	cpi	r24, STK_READ_SIGN	; 'u'
    3f30:	85 37       	cpi	r24, 0x75	; 117
	brne	ck_LEAVE
    3f32:	39 f4       	brne	.+14     	; 0x3f42 <ck_LEAVE>
;	READ SIGN - return what Avrdude wants to hear
	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    3f34:	0f d0       	rcall	.+30     	; 0x3f54 <verifySpace>
	ldi	r24, SIGNATURE_0
    3f36:	8e e1       	ldi	r24, 0x1E	; 30
	rcall	putch
    3f38:	12 d0       	rcall	.+36     	; 0x3f5e <putch>
	ldi	r24, SIGNATURE_1
    3f3a:	84 e9       	ldi	r24, 0x94	; 148
	rcall	putch
    3f3c:	10 d0       	rcall	.+32     	; 0x3f5e <putch>
	ldi	r24, SIGNATURE_2
    3f3e:	86 e0       	ldi	r24, 0x06	; 6
	rjmp	to_putch	; rcall putch, rjmp put_ok
    3f40:	91 cf       	rjmp	.-222    	; 0x3e64 <to_putch>

00003f42 <ck_LEAVE>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_LEAVE:
      	cpi	r24, STK_LEAVE_PROGMODE	; 'Q'
    3f42:	81 35       	cpi	r24, 0x51	; 81
	brne	ver_put 
    3f44:	11 f4       	brne	.+4      	; 0x3f4a <ver_put>
;  Adaboot no wait mod
	ldi	r20, WATCHDOG_16MS	; 0x08
    3f46:	48 e0       	ldi	r20, 0x08	; 8
	rcall	watchdogConfig
    3f48:	33 d0       	rcall	.+102    	; 0x3fb0 <watchdogConfig>

00003f4a <ver_put>:
ver_put:
     	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    3f4a:	04 d0       	rcall	.+8      	; 0x3f54 <verifySpace>
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    3f4c:	ee cf       	rjmp	.-36     	; 0x3f2a <put_ok>

00003f4e <getNch>:
;**********************************************************
; read r20 count character from serial input and look if space follow
getNch:		; call  getNch, r20 = count
	; repeat count times "call getch"
repeat_g:
     	rcall	getch		; do getch(); while (--count);
    3f4e:	0f d0       	rcall	.+30     	; 0x3f6e <getch>
       	subi	r20, 1		; count - 1
    3f50:	41 50       	subi	r20, 0x01	; 1
     	brne	repeat_g
    3f52:	e9 f7       	brne	.-6      	; 0x3f4e <getNch>

00003f54 <verifySpace>:

;**********************************************************
; look if a space character can be read from serial input and answer
verifySpace:		/* void verifySpace(void) { */
; use of r24,
     	rcall	getch		; if (getch() != CRC_EOP)
    3f54:	0c d0       	rcall	.+24     	; 0x3f6e <getch>
       	cpi	r24, CRC_EOP	; 0x20
    3f56:	80 32       	cpi	r24, 0x20	; 32
       	breq	no_to
    3f58:	09 f0       	breq	.+2      	; 0x3f5c <no_to>
#if 1
     	rcall	wait_timeout		;wait_timeout();
    3f5a:	27 d0       	rcall	.+78     	; 0x3faa <wait_timeout>

00003f5c <no_to>:
	ldi	r24, STK_NOSYNC
	rcall	putch
	rjmp	get_nextp	
#endif
no_to:
       	ldi	r24, STK_INSYNC
    3f5c:	84 e1       	ldi	r24, 0x14	; 20

00003f5e <putch>:
 #endif // baud rate fastn check
putch:	/* void putch(char r24) */
 #if ((LED_DATA_FLASH & 0x02) > 0) && defined(LED_PORT) && defined(LEDbit)
	ASBI	LED_PORT, LEDbit
 #endif
	AIN	r25, UART_SRA	; while (!(UART_SRA & _BV(UDRE0)));
    3f5e:	90 91 c0 00 	lds	r25, 0x00C0
      	sbrs	r25, UDRE0
    3f62:	95 ff       	sbrs	r25, 5
      	rjmp	putch		; wait, UART out not ready
    3f64:	fc cf       	rjmp	.-8      	; 0x3f5e <putch>
	AOUT	UART_UDR, r24	; UART_UDR = ch;
    3f66:	80 93 c6 00 	sts	0x00C6, r24
 #if ((LED_DATA_FLASH & 0x02) > 0) && defined(LED_PORT) && defined(LEDbit)
	ACBI	LED_PORT, LEDbit
 #endif
	wdr		; watchdogReset(); /* prevent watch dog timeout during slow serial output */
    3f6a:	a8 95       	wdr
      	ret
    3f6c:	08 95       	ret

00003f6e <getch>:
getch: 
 #if ((LED_DATA_FLASH & 0x01) > 0) && defined(LED_PORT) && defined(LEDbit)
	ASBI	LED_PORT, LEDbit
 #endif
gtch1:
	AIN	r24, UART_SRA		; if (UART_SRA & _BV(RXC0)) {
    3f6e:	80 91 c0 00 	lds	r24, 0x00C0
     	sbrs	r24, RXC0
    3f72:	87 ff       	sbrs	r24, 7
       	rjmp	gtch1			; no data received, wait
    3f74:	fc cf       	rjmp	.-8      	; 0x3f6e <getch>
      	sbrs	r24, FE0		; if (!(UART_SRA & _BV(FE0))) {
    3f76:	84 ff       	sbrs	r24, 4
     	wdr		; watchdogReset();
    3f78:	a8 95       	wdr
         * watchdog.  This should cause the bootloader to abort and run
         * the application "soon", if it keeps happening.  (Note that we
         * don't care that an invalid char is returned...)
         */

 	AIN	r24, UART_UDR	; ch = UART_UDR; return ch;
    3f7a:	80 91 c6 00 	lds	r24, 0x00C6
 #if ((LED_DATA_FLASH & 0x01) > 0) && defined(LED_PORT) && defined(LEDbit)
	ACBI	LED_PORT, LEDbit
 #endif
       	ret
    3f7e:	08 95       	ret

00003f80 <set_eeprom_adr>:
;**********************************************************
#if defined(VIRTUAL_BOOT_PARTITION) || defined(SUPPORT_EEPROM)
/* Z hold the eeprom address, which is loaded to EEAR and afterwards increased by 1 */
/* ASBIC can destroy content of register r0 */
set_eeprom_adr:
  	ASBIC	EECR, EEPE	; while (!eeprom_is_ready())
    3f80:	f9 99       	sbic	0x1f, 1	; 31
   	rjmp	set_eeprom_adr	; wait
    3f82:	fe cf       	rjmp	.-4      	; 0x3f80 <set_eeprom_adr>
;	rcall	wait_flash_ready

 #ifdef EEARH
	AOUT	EEARH, ZH	; EEAR = addrPtr++
    3f84:	f2 bd       	out	0x22, r31	; 34
 #endif
	AOUT	EEARL, ZL
    3f86:	e1 bd       	out	0x21, r30	; 33
	adiw	ZL, 1
    3f88:	31 96       	adiw	r30, 0x01	; 1
	ret			; set_eeprom_adr
    3f8a:	08 95       	ret

00003f8c <get_length>:
;**********************************************************
;	rcall get_length get two bytes from serial inputi
;	result is r26:r27 = r16:r17  last:first byte
;	use r22, r25 (soft)
get_length:
	rcall	getch
    3f8c:	f0 df       	rcall	.-32     	; 0x3f6e <getch>
	mov	r17, r24	; r17 = upper bits of length
    3f8e:	18 2f       	mov	r17, r24
	rcall	getch
    3f90:	ee df       	rcall	.-36     	; 0x3f6e <getch>
	mov	r16, r24	; r16 = lower bits of length
    3f92:	08 2f       	mov	r16, r24
	movw	r26, r16	; can be changed by sbiw or adiw
    3f94:	d8 01       	movw	r26, r16
	ret
    3f96:	08 95       	ret

00003f98 <wait_flash_ready>:

;**********************************************************
;	call wait_flash_ready wait for a idle Flash controller
;	use r0
wait_flash_ready:
       	AIN	r0, SPMCSR 
    3f98:	07 b6       	in	r0, 0x37	; 55
	sbrc	r0, SELFPRGEN
    3f9a:	00 fc       	sbrc	r0, 0
	rjmp	wait_flash_ready
    3f9c:	fd cf       	rjmp	.-6      	; 0x3f98 <wait_flash_ready>
	ret
    3f9e:	08 95       	ret

00003fa0 <boot_page_erase>:
;	r20 is used to setup the spm instruction
;	probably RAMPZ must be set before to extend the r4:r5 address
;	return is immediately, the flash controller is probably still busy
boot_page_erase:
;	rcall	wait_flash_ready
    	movw	ZL, r4		; __boot_page_erase_short((uint16_t)(void*)address)
    3fa0:	f2 01       	movw	r30, r4
	ldi	r20, (1<<PGERS)|(1<<SELFPRGEN)	; 0x03
    3fa2:	43 e0       	ldi	r20, 0x03	; 3

00003fa4 <do_spm>:
;	second entry	***********************************
;	rcall do_spm
;	r20 must contain the spm command
;	no register is destroyed
do_spm:
	AOUT	SPMCSR, r20	; (1<<PGERS)|(SELFPRGEN)
    3fa4:	47 bf       	out	0x37, r20	; 55
	spm
    3fa6:	e8 95       	spm
#ifdef __AVR_ATmega163__
;	special handling of spm for ATmega163
	.word	0xffff
	nop
#endif
	ret
    3fa8:	08 95       	ret

00003faa <wait_timeout>:

;**********************************************************
;	rcall wait_timeout  set the watch dog timer to 16ms and wait for reset
wait_timeout:
     	ldi	r20, WATCHDOG_16MS
    3faa:	48 e0       	ldi	r20, 0x08	; 8
	rcall	watchdogConfig	;  watchdogConfig(WATCHDOG_16MS) 
    3fac:	01 d0       	rcall	.+2      	; 0x3fb0 <watchdogConfig>

00003fae <lop77>:
lop77:
    	rjmp	lop77		; endless loop, watch Dog will reset!
    3fae:	ff cf       	rjmp	.-2      	; 0x3fae <lop77>

00003fb0 <watchdogConfig>:
watchdogConfig: 
#ifndef WDTCSR
 #define WDTCSR  WDTCR
#endif
#if defined(WDCE)
    	ldi	r21, (1<<WDCE) | (1<<WDE)	; 0x18
    3fb0:	58 e1       	ldi	r21, 0x18	; 24
	AOUT	WDTCSR, r21	; (1<<WDCE) | (1<<WDE) ; watchdogConfig(x);
    3fb2:	50 93 60 00 	sts	0x0060, r21
       	AOUT	WDTCSR, r20		; WDTCSR = x;
    3fb6:	40 93 60 00 	sts	0x0060, r20
    	ldi	r21, (1<<WDE)	; 0x08
 #endif
	AOUT	WDTCSR, r21	; (1<<WDCE) | (1<<WDE) ; watchdogConfig(x);
       	AOUT	WDTCSR, r20		; WDTCR = x;
#endif
       	ret
    3fba:	08 95       	ret

00003fbc <wait_T1ov>:
; use  r24 and probably r0
 #define Check_RX 0
wait_T1ov:
 #ifdef TCNT1H
; use 16-Bit counter
	ldi	r24, hi8(0xffff-(F_CPU/(1024*16)))
    3fbc:	8c ef       	ldi	r24, 0xFC	; 252
	AOUT	TCNT1H, r24		; set new counter value to TCNT1
    3fbe:	80 93 85 00 	sts	0x0085, r24
	ldi	r24, lo8(0xffff-(F_CPU/(1024*16)))
    3fc2:	8f e2       	ldi	r24, 0x2F	; 47
	AOUT	TCNT1L, r24
    3fc4:	80 93 84 00 	sts	0x0084, r24
	ldi	r24, (1<<CS12)|(1<<CS10)	; internal clock, divide by 1024, mode 0
    3fc8:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(TCCR1B), r24	
    3fca:	80 93 81 00 	sts	0x0081, r24

00003fce <wt_ov1>:
  #endif
 #endif
;	ASBIS	TIFR1, TOV1	; wait until OV bit is set again
;	rjmp	wt_ov		; no OverFlow, wait
;	ASBI	TIFR1, TOV1	; clear OV bit Timer1
	AIN	r24, TIFR1
    3fce:	86 b3       	in	r24, 0x16	; 22
	sbrs	r24, TOV1
    3fd0:	80 ff       	sbrs	r24, 0
	rjmp	wt_ov1		; no OverFlow, wait
    3fd2:	fd cf       	rjmp	.-6      	; 0x3fce <wt_ov1>
	AOUT	TIFR1, r24	; clear the flags
    3fd4:	86 bb       	out	0x16, r24	; 22

00003fd6 <wt_fin>:
	inc	r25
	brne	wt_ov0		; wait to next OV
  #endif
 #endif
wt_fin:
     	wdr		; watchdogReset();  /* prevent watch dog timeout during flashing the LED */
    3fd6:	a8 95       	wdr
	ret
    3fd8:	08 95       	ret
; 
; FORCE_WATCHDOG=
; LED_START_FLASHES=3
; LED_DATA_FLASH=
; LED=
; UART=
; SOURCE_TYPE=S
; SUPPORT_EEPROM=1
; MCU_TARGET = atmega168
; AVR_FREQ= 16000000 
; BAUD_RATE=115200
